#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <math.h>
#include <sys/mman.h>

#define CHUNK_SIZE	10
//0
//000

int usage(const char *prg, int exit_code) {
	printf("Usage: %s <input_file> <out_file>\n", prg);
	return exit_code;
}

uint32_t reorganize_input_data(FILE *in, int out);
double* sort_data(double *buf_in, double *buf_out, size_t left, size_t right);
double get_buf_value(int fd, size_t offset);

int merge_blocks(int fd_in, int fd_out, size_t size, size_t left, size_t right);
int copy_block(int fd_in, int fd_out, size_t offset, size_t size);


int main(int argc, char *argv[]) {
    const char *tmp_file = "input_data_raw";
    const char *buf_file = "data_buf";
    uint32_t total_count = 0/*, portion, index*/;
    FILE *f_in, *f_out;
    int fd_tmp, fd_buf;
    struct stat st;
    

	if(argc < 3) {
		return usage(argv[0], -1);
	}

    if (stat(argv[1], &st) == -1) {
        printf("File is not exists: %s\n", argv[1]);
        return usage(argv[0], -1);
    }

    f_in = fopen(argv[1], "r");

    if(!f_in) {
        printf("Unable to open input file (%s) for reading: %s\n", argv[1], strerror(errno));
        return usage(argv[0], -1);
    }

    fd_tmp = open(tmp_file, O_RDWR|O_CREAT|O_TRUNC);
    if(fd_tmp < 0) {
        printf("Unable to open output file (%s) for writing: %s\n", tmp_file, strerror(errno));
        return -1;
    }
    fchmod(fd_tmp, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);

    fd_buf = open(buf_file, O_RDWR|O_CREAT|O_TRUNC);                                                            
    if(fd_buf < 0) {                                                                                            
        printf("Unable to open output file (%s) for writing: %s\n", buf_file, strerror(errno));                 
        return -1;                                                                                              
    }                                                                                                           
    fchmod(fd_buf, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
    

    f_out = fopen(argv[2], "w");
    if(!f_out) {        
        printf("Unable to open output file (%s) for reading: %s\n", argv[2], strerror(errno));
        return usage(argv[0], -1);
    }

    printf("reorganize data ... \n");

    total_count = reorganize_input_data(f_in, fd_tmp);
    
    printf("total = %u\n", total_count);

    
    if(total_count > 0) {
        size_t i;
		size_t chunk_size = CHUNK_SIZE;
		size_t portion;
		size_t rest /*= total_count * sizeof(double)*/;
		size_t	left/*, right*/;
		int fd_in, fd_out, target;
        size_t data_size = total_count * sizeof(double);
/*        double *buf_data = NULL;
        double *in_data = (double*)mmap(NULL, data_size, PROT_READ|PROT_WRITE,
                                        MAP_SHARED, fd_tmp, 0);
        if(in_data == MAP_FAILED) {
            printf("Unable to map input file: %s\n", strerror(errno));                                                     
            return -1;
        }

        buf_data = (double*)mmap(NULL, data_size, PROT_READ|PROT_WRITE,
                                    MAP_SHARED, fd_buf, 0);

        if(buf_data == MAP_FAILED) {
            printf("Unable to map buf file: %s\n", strerror(errno));
            return -1;
        }
*/
        ftruncate(fd_buf, total_count * sizeof(double));
        lseek(fd_buf, SEEK_SET, 0);

        printf("sorting ...\n");
		fd_in = fd_tmp;
		fd_out = fd_buf;
		
		left = 0;
		while(chunk_size < total_count) {
			int tmp;
			rest = total_count/*data_size*/;
			left = 0;	
			while(rest > 0) {
				portion = (rest > 2*chunk_size ? 2*chunk_size : rest);
				target = merge_blocks(fd_in, fd_out, portion, left, left+portion);
				left += portion;
				rest -= portion;
printf("rest = %lu\n", rest);
				if(rest <= chunk_size) {
					copy_block(fd_in, fd_out, left, rest);
					rest = 0;
				}
			}
//			exit(0);
			chunk_size *= 2;
			tmp = fd_in;
			fd_in = fd_out;
			fd_out = tmp;
printf("chunk = %lu\n", chunk_size);
		}

//		while(chunk_size <= total_count * sizeof(double))
//		merge_blocks();
//        sort_data(in_data, buf_data, 0, total_count);    
       
/*                                                                                                         
        for(i=0; i<total_count; i++) {                                                                                
            fprintf(f_out, "%1.15e\n", buf_data[i]);                                                                         
        }                                                                                                       
*/

        printf("write result ...\n");
        lseek(fd_buf, 0, SEEK_SET);
        for(i=0; i<total_count; i++) {
//            double val = get_buf_value(fd_buf, i);
            double val = get_buf_value(target, i);
            fprintf(f_out, "%1.15e\n", val);
        }




/*
        munmap(in_data, data_size);
        munmap(buf_data, data_size);
*/
    }

    close(fd_buf);
    close(fd_tmp);
    fclose(f_in);
    fclose(f_out);    

//	unlink(tmp_file);
//	unlink(buf_file);

	return 0;
}

int copy_block(int fd_in, int fd_out, size_t offset, size_t size) {
	double *buf = calloc(size, sizeof(double));
	
	lseek(fd_in, offset*sizeof(double), SEEK_SET);	
	read(fd_in, buf, size*sizeof(double));
	lseek(fd_out, offset*sizeof(double), SEEK_SET);	
	write(fd_in, buf, size*sizeof(double));

	free(buf);
}

int merge_blocks(int fd_in, int fd_out, size_t size, size_t left, size_t right) {
    double *buf = NULL, *left_buf = NULL, *right_buf=NULL, *target = NULL;
	size_t i, l_curr, r_curr;
	size_t middle = size/2; //(right+left)/2;

	(void)sizeof(right);

printf("merge data from %lu to %lu; size = %lu\n", left, right, size);
	
	lseek(fd_in, left*sizeof(double), SEEK_SET);
	buf = calloc(size, sizeof(double));
	read(fd_in, buf, size*sizeof(double));

	left_buf = buf;
	right_buf = buf+middle;

//	right_buf = calloc(size/2, sizeof(double));
//	read(fd_in, right_buf, (size/2)*sizeof(double));

	target = calloc(size, sizeof(double));

	for(i=0; i<size; i++) {
		printf("read ==> [%d]: %1.15e\n", i, buf[i]);
	} 


    l_curr = /*left*/0, r_curr = 0; //middle + 1;
    for (i = /*left*/0; i < size; i++) {
printf("i = %lu; l_curr = %lu; r_curr = %lu; middle = %lu; left_buf[l_curr] = %1.15e; right_buf[r_curr] = %1.15e; ", i, l_curr, r_curr, middle, left_buf[l_curr], right_buf[r_curr]);
        if (l_curr < middle && r_curr < middle/*right*/) {
            if (left_buf[l_curr] < right_buf[r_curr]) {
                target[i] = left_buf[l_curr];
                l_curr++;
            } else {
                target[i] = right_buf[r_curr];
                r_curr++;
            }
        } else if (l_curr < middle) {
            target[i] = left_buf[l_curr];
            l_curr++;
        } else if (r_curr < middle){
            target[i] = right_buf[r_curr];
            r_curr++;
        }
printf(" target[i] = %1.15e\n", target[i]);
    }
	
	for(i=0; i<size; i++) {
		printf("write ==> [%d]: %1.15e\n", i, target[i]);
	} 
	lseek(fd_out, left*sizeof(double), SEEK_SET);
	write(fd_out, target, size*sizeof(double));

//	(void)sizeof(fd_in);
//	(void)sizeof(fd_out);

//	free(left_buf);
	free(buf);
	free(target);

	return fd_out;
}


int compare(const void *a, const void *b) {
    const double *left, *right;
    
    left = (const double*)a;
    right = (const double*)b;
   
    if (*left < *right) {   
        return -1;   
    } else if (*left > *right) {   
        return 1;
    }     

    return 0;
}

uint32_t reorganize_input_data(FILE *in, int out) {
//	const uint32_t data_size = 10000/*00*/;
    double tmp_dbl;
	double *dbl = NULL;
    uint32_t total = 0, index = 0;
	

//    (void)sizeof(out);

	dbl = calloc(CHUNK_SIZE, sizeof(double));
	if(!dbl) {
		printf("Unable to alloc memory!\n");
		exit(-1);
	}

    while(!feof(in)) {
        if(fscanf(in, "%lfu", &tmp_dbl) > 0) {
            if(!isnan(tmp_dbl)) {
//                write(out, &tmp_dbl, sizeof(double));
				dbl[index++] = tmp_dbl;
				if(index >= CHUNK_SIZE) {
//printf("[%u] sorting buf ...\n", total);			
					qsort(dbl, index, sizeof(double), compare);
					write(out, dbl, index*sizeof(double));
					index = 0;
				}		
                total++;
            } 
        } 
    }

	qsort(dbl, index, sizeof(double), compare);
	write(out, dbl, index*sizeof(double));

	free(dbl);

    lseek(out, SEEK_SET, 0);    
    return total;
}

double get_buf_value(int fd, size_t offset) {
    double val;

    lseek(fd, offset*sizeof(double), SEEK_SET);
    read(fd, &val, sizeof(double));

    return val;
}


/*

https://ru.wikipedia.org/wiki/Сортировка_слиянием

*/

double* sort_data(double *buf_in, double *buf_out, size_t left, size_t right) {
    size_t i, l_curr, r_curr;
    double *target = NULL;
    double *left_buf, *right_buf;
    size_t middle = (right+left)/2;

    if(left == right) {
        buf_out[left] = buf_in[left];
        return buf_out;
    }

    left_buf = sort_data(buf_in, buf_out, left, middle);
    right_buf = sort_data(buf_in, buf_out, middle+1, right);

    target = (left_buf == buf_in ? buf_out : buf_in);

    l_curr = left, r_curr = middle + 1;
    for (i = left; i <= right; i++) {
        if (l_curr <= middle && r_curr <= right) {
            if (left_buf[l_curr] < right_buf[r_curr]) {
                target[i] = left_buf[l_curr];
                l_curr++;
            } else {
                target[i] = right_buf[r_curr];
                r_curr++;
            }
        } else if (l_curr <= middle) {
            target[i] = left_buf[l_curr];
            l_curr++;
        } else {
            target[i] = right_buf[r_curr];
            r_curr++;
        }
    }

    return target;
}

