#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <math.h>
#include <sys/mman.h>

int usage(const char *prg, int exit_code) {
	printf("Usage: %s <input_file> <out_file>\n", prg);
	return exit_code;
}

uint32_t reorganize_input_data(FILE *in, int out);
int sort_data(int buf_in, int buf_out, size_t left, size_t right);
double get_buf_value(int fd, size_t offset);

int main(int argc, char *argv[]) {
    const char *tmp_file = "input_data_raw";
    const char *buf_file = "data_buf";
    uint32_t total_count = 0;
    FILE *f_in, *f_out;
    int fd_tmp, fd_buf;
    struct stat st;
    

	if(argc < 3) {
		return usage(argv[0], -1);
	}

    if (stat(argv[1], &st) == -1) {
        printf("File is not exists: %s\n", argv[1]);
        return usage(argv[0], -1);
    }

    f_in = fopen(argv[1], "r");

    if(!f_in) {
        printf("Unable to open input file (%s) for reading: %s\n", argv[1], strerror(errno));
        return usage(argv[0], -1);
    }

    fd_tmp = open(tmp_file, O_RDWR|O_CREAT|O_TRUNC);
    if(fd_tmp < 0) {
        printf("Unable to open output file (%s) for writing: %s\n", tmp_file, strerror(errno));
        return -1;
    }
    fchmod(fd_tmp, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);

    fd_buf = open(buf_file, O_RDWR|O_CREAT|O_TRUNC);                                                            
    if(fd_buf < 0) {                                                                                            
        printf("Unable to open output file (%s) for writing: %s\n", buf_file, strerror(errno));                 
        return -1;                                                                                              
    }                                                                                                           
    fchmod(fd_buf, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
    

    f_out = fopen(argv[2], "w");
    if(!f_out) {        
        printf("Unable to open output file (%s) for reading: %s\n", argv[2], strerror(errno));
        return usage(argv[0], -1);
    }

    printf("reorganize data ... \n");

    total_count = reorganize_input_data(f_in, fd_tmp);
    
    printf("total = %u\n", total_count);

    
    if(total_count > 0) {
        size_t i;
        ftruncate(fd_buf, total_count * sizeof(double));
        lseek(fd_buf, SEEK_SET, 0);

        printf("sorting ...\n");
        sort_data(fd_tmp, fd_buf, 0, total_count);    
       
		printf("write result ...\n");
        lseek(fd_buf, 0, SEEK_SET);
        for(i=0; i<total_count; i++) {
            double val = get_buf_value(fd_buf, i);
            fprintf(f_out, "%1.15e\n", val);
        }
    }

    close(fd_buf);
    close(fd_tmp);
    fclose(f_in);
    fclose(f_out);    

	unlink(tmp_file);
	unlink(buf_file);

	return 0;
}

uint32_t reorganize_input_data(FILE *in, int out) {
    double tmp_dbl;
    uint32_t total = 0;
	double *dbl = NULL;
	size_t index = 0;

	dbl = calloc(1000, sizeof(double));

    while(!feof(in)) {
        if(fscanf(in, "%lfu", &tmp_dbl) > 0) {
            if(!isnan(tmp_dbl)) {
				dbl[index++] = tmp_dbl;
				if(index >= 1000) {
					write(out, dbl, index*sizeof(double));
					index = 0;
				}
                total++;
            } 
        } 
    }

	write(out, dbl, index*sizeof(double));
	free(dbl);

    lseek(out, SEEK_SET, 0);    
    return total;
}

/*

https://ru.wikipedia.org/wiki/Сортировка_слиянием

*/

double *get_buf(int fd, size_t left, size_t right) {
	size_t size = right-left+1;
	double *buf = calloc(size+1, sizeof(double));

	lseek(fd, left*sizeof(double), SEEK_SET);
	read(fd, buf, (size+1)*sizeof(double));

	return buf;	
}

double get_buf_value(int fd, size_t offset) {
    double val;

    lseek(fd, offset*sizeof(double), SEEK_SET);
    read(fd, &val, sizeof(double));

    return val;
}


void set_buf_value(int fd, size_t offset, double val) {
    lseek(fd, offset*sizeof(double), SEEK_SET);
    write(fd, &val, sizeof(double));
}

int sort_data(int fd_buf_in, int fd_buf_out, size_t left, size_t right) {
    size_t i, l_curr, r_curr;
    int target;
	int fd_left_buf;
	int fd_right_buf;
    double *left_buf, *right_buf, *target_buf;
    size_t middle = (right+left)/2;
	size_t size = right-left+1;
	size_t size_left, size_right;
	
    if(left == right) {
		double left_val = get_buf_value(fd_buf_in, left);
		set_buf_value(fd_buf_out, left, left_val);
        return fd_buf_out;
    }
    fd_left_buf = sort_data(fd_buf_in, fd_buf_out, left, middle);
    fd_right_buf = sort_data(fd_buf_in, fd_buf_out, middle+1, right);

    target = (fd_left_buf == fd_buf_in ? fd_buf_out : fd_buf_in);

	left_buf = get_buf(fd_left_buf, left, middle);
	right_buf = get_buf(fd_right_buf, middle+1, right);
	target_buf = calloc(size+1, sizeof(double));	

    l_curr = 0, r_curr = 0;
	size_left = middle-left;
	size_right = right-middle;
    for (i = 0; i < size; i++) {
        if (l_curr <= size_left && r_curr < size_right) {
            if (left_buf[l_curr] < right_buf[r_curr]) {
                target_buf[i] = left_buf[l_curr];
                l_curr++;
            } else {
                target_buf[i] = right_buf[r_curr];
                r_curr++;
            }
        } else if (l_curr <= size_left) {
            target_buf[i] = left_buf[l_curr];
            l_curr++;
        } else {
            target_buf[i] = right_buf[r_curr];
            r_curr++;
        }
    }

   	lseek(target, left*sizeof(double), SEEK_SET);
    write(target, target_buf, size*sizeof(double));

	free(left_buf);
	free(right_buf);
	free(target_buf);

    return target;
}

